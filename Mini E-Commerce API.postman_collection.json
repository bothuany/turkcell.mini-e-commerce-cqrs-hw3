{
	"info": {
		"_postman_id": "4d7ada06-2281-403d-a1eb-98d9dc1e19e7",
		"name": "Mini E-Commerce API",
		"description": "Mini E-Commerce API with CQRS pattern. All endpoints except Auth require Bearer token.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22631048",
		"_collection_link": "https://galactic-resonance-206028.postman.co/workspace/User~5f0f7a12-e577-453d-bec9-4a54d2d48833/collection/22631048-4d7ada06-2281-403d-a1eb-98d9dc1e19e7?action=share&source=collection_link&creator=22631048"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Register Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Token is present in the response\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.token).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Name field is required\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.name).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Surname field is required\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.surname).to.not.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Admin\",\n    \"surname\": \"User\",\n    \"username\": \"admin@example.com\",\n    \"password\": \"Password123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/register/admin",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register",
								"admin"
							]
						},
						"description": "Register a new admin account.\nValidations:\n- name: Required\n- surname: Required\n- username: Required, must be valid email\n- password: Required, min 8 chars, must contain digit, lowercase and uppercase letter"
					},
					"response": []
				},
				{
					"name": "Register Seller",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has content type application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Token is present in the response\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.token).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"The request body must contain required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.name).to.exist;",
									"    pm.expect(responseData.surname).to.exist;",
									"    pm.expect(responseData.username).to.exist.and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
									"    pm.expect(responseData.password).to.exist.and.to.have.lengthOf.at.least(8);",
									"    pm.expect(responseData.password).to.match(/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}$/);",
									"    pm.expect(responseData.companyName).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"The username must be a valid email address\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.username).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Username must be a valid email address\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Jane\",\n    \"surname\": \"Smith\",\n    \"username\": \"seller@example.com\",\n    \"password\": \"Password123\",\n    \"companyName\": \"Best Shop\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/register/seller",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register",
								"seller"
							]
						},
						"description": "Register a new seller account.\nValidations:\n- name: Required\n- surname: Required\n- username: Required, must be valid email\n- password: Required, min 8 chars, must contain digit, lowercase and uppercase letter\n- companyName: Required"
					},
					"response": []
				},
				{
					"name": "Register Customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Token is present in the response\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.token).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"The request body must contain name, surname, username, password, and address fields\", function () {",
									"    const requestData = pm.request.json();",
									"",
									"    pm.expect(requestData).to.be.an('object');",
									"    pm.expect(requestData.name).to.exist.and.to.be.a('string');",
									"    pm.expect(requestData.surname).to.exist.and.to.be.a('string');",
									"    pm.expect(requestData.username).to.exist.and.to.be.a('string').and.to.match(/\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/);",
									"    pm.expect(requestData.password).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(8);",
									"    pm.expect(requestData.address).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"The username in the request body is a valid email address\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.token).to.exist.and.to.be.a('string');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"John\",\n    \"surname\": \"Doe\",\n    \"username\": \"customer@example.com\",\n    \"password\": \"Password123\",\n    \"address\": \"123 Customer St.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/register/customer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register",
								"customer"
							]
						},
						"description": "Register a new customer account.\nValidations:\n- name: Required\n- surname: Required\n- username: Required, must be valid email\n- password: Required, min 8 chars, must contain digit, lowercase and uppercase letter\n- address: Required"
					},
					"response": []
				},
				{
					"name": "Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"adminToken\", jsonData.token);",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response must have the required Content-Type header with value application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"The token must be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Username is required and in a valid email format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.token).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"The response must be a valid JSON object\", function () {",
									"  const responseData = pm.response.json();",
									"  pm.expect(responseData).to.be.an('object');",
									"});",
									"",
									"pm.test(\"Token must exist in the response\", function () {",
									"  const responseData = pm.response.json();",
									"  pm.expect(responseData.token).to.exist;",
									"});",
									"",
									"pm.test(\"Username must be a valid email\", function () {",
									"  // Implement email validation test here",
									"});",
									"",
									"pm.test(\"Password is required\", function () {",
									"  // Implement password required test here",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"admin@example.com\",\n    \"password\": \"Password123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						},
						"description": "Login as admin. Token is automatically saved to adminToken variable.\nValidations:\n- username: Required, must be valid email\n- password: Required"
					},
					"response": []
				},
				{
					"name": "Seller Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"sellerToken\", jsonData.token);",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"The token must not be empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.token).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"Token is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.token).to.be.a('string').and.to.match(/[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+/, \"Token format is not valid\");",
									"});",
									"",
									"",
									"pm.test(\"Response contains the required field - token\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.have.property('token');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"seller@example.com\",\n    \"password\": \"Password123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						},
						"description": "Login as seller. Token is automatically saved to sellerToken variable.\nValidations:\n- username: Required, must be valid email\n- password: Required"
					},
					"response": []
				},
				{
					"name": "Customer Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"customerToken\", jsonData.token);",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required Content-Type header of application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"The response must be a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Username must be a valid email format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.token).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Username is required and must be a valid email\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.token).to.exist.and.to.be.a('string');",
									"    pm.expect(pm.request.url).to.equal('http://localhost:8080/api/v1/auth/login');",
									"});",
									"",
									"pm.test(\"Password is required in the request\", function () {",
									"    pm.expect(pm.request.body).to.include(\"password\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"customer@example.com\",\n    \"password\": \"Password123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						},
						"description": "Login as customer. Token is automatically saved to customerToken variable.\nValidations:\n- username: Required, must be valid email\n- password: Required"
					},
					"response": []
				}
			]
		},
		{
			"name": "Categories",
			"item": [
				{
					"name": "Create Category",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Electronics\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"categories"
							]
						},
						"description": "Create a new category (Admin role required)"
					},
					"response": []
				},
				{
					"name": "Create Category Sub",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Laptop\",\n    \"parentId\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"categories"
							]
						},
						"description": "Create a new category (Admin role required)"
					},
					"response": []
				},
				{
					"name": "Get Categories",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Electronics\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"categories"
							]
						},
						"description": "Create a new category (Admin role required)"
					},
					"response": []
				},
				{
					"name": "Get Categories Tree",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Electronics\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/categories/tree",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"categories",
								"tree"
							]
						},
						"description": "Create a new category (Admin role required)"
					},
					"response": []
				},
				{
					"name": "Get Category By Id",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Electronics\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/categories/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"categories",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						},
						"description": "Create a new category (Admin role required)"
					},
					"response": []
				},
				{
					"name": "Get SubCategories By Id",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Electronics\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/categories/:id/subcategories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"categories",
								":id",
								"subcategories"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						},
						"description": "Create a new category (Admin role required)"
					},
					"response": []
				},
				{
					"name": "Delete Category",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Electronics\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/categories/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"categories",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						},
						"description": "Create a new category (Admin role required)"
					},
					"response": []
				},
				{
					"name": "Update Category",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Electronics & Gadgets\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/categories/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"categories",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						},
						"description": "Update an existing category (Admin role required)"
					},
					"response": []
				}
			]
		},
		{
			"name": "Products",
			"item": [
				{
					"name": "Create Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('name');",
									"    pm.expect(responseData).to.have.property('unitPrice');",
									"    pm.expect(responseData).to.have.property('stock');",
									"    pm.expect(responseData).to.have.property('categoryId');",
									"    pm.expect(responseData).to.have.property('seller');",
									"    pm.expect(responseData).to.have.property('description');",
									"    pm.expect(responseData).to.have.property('image');",
									"});",
									"",
									"",
									"pm.test(\"Seller ID is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.seller.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Seller ID should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Unit price should be a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.unitPrice).to.be.a('number');",
									"    pm.expect(responseData.unitPrice).to.be.at.least(0, \"Value should be non-negative\");",
									"});",
									"",
									"pm.test(\"Stock should be a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.stock).to.be.a('number');",
									"    pm.expect(responseData.stock).to.be.at.least(0, \"Value should be non-negative\");",
									"});",
									"",
									"",
									"pm.test(\"Category ID and seller ID are non-negative integers\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.categoryId).to.be.a('number').and.to.be.at.least(0);",
									"  pm.expect(responseData.seller.id).to.be.a('string').and.to.match(/^\\d+$/);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{sellerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Premium Headphones\",\n    \"unitPrice\": 299.99,\n    \"stock\": 50,\n    \"categoryId\": 1,\n    \"description\": \"High-quality wireless headphones with noise cancellation\",\n    \"image\": \"https://example.com/images/headphones.jpg\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"products"
							]
						},
						"description": "Create a new product (Seller role required)"
					},
					"response": []
				},
				{
					"name": "Update Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Validate the product object\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.be.a('number');",
									"    pm.expect(responseData.name).to.be.a('string');",
									"    pm.expect(responseData.unitPrice).to.be.a('number');",
									"    pm.expect(responseData.stock).to.be.a('number');",
									"    pm.expect(responseData.categoryId).to.be.a('number');",
									"    pm.expect(responseData.categoryName).to.be.a('string');",
									"    ",
									"    pm.expect(responseData.seller).to.be.an('object');",
									"    pm.expect(responseData.seller.id).to.be.a('string');",
									"    pm.expect(responseData.seller.name).to.be.a('string');",
									"    pm.expect(responseData.seller.surname).to.be.a('string');",
									"    pm.expect(responseData.seller.username).to.be.a('string');",
									"    pm.expect(responseData.seller.companyName).to.be.a('string');",
									"    ",
									"    pm.expect(responseData.description).to.be.a('string');",
									"    pm.expect(responseData.image).to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Seller's username is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.seller.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Seller's username should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Ensure the presence of specific fields in the response\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.include.all.keys('id', 'name', 'unitPrice', 'stock', 'categoryId', 'categoryName', 'description', 'image');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{sellerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{   \n    \"id\": 1,\n    \"name\": \"Premium Headphones V2\",\n    \"unitPrice\": 349.99,\n    \"stock\": 75,\n    \"categoryId\": 1,\n    \"sellerId\": \"adb9fa63-277f-447e-8b3e-0e268405ef1e\",\n    \"description\": \"Updated version with better battery life\",\n    \"image\": \"https://example.com/images/headphones-v2.jpg\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"products"
							]
						},
						"description": "Update an existing product (Seller role required)"
					},
					"response": []
				},
				{
					"name": "Get All Products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the correct Content-Type header\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response body is an empty array\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.empty;",
									"});",
									"",
									"",
									"pm.test(\"Each product object in the array should have a defined structure\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    responseData.forEach(function(product) {",
									"        pm.expect(product).to.be.an('object');",
									"        pm.expect(product).to.have.property('id');",
									"        pm.expect(product).to.have.property('name');",
									"        pm.expect(product).to.have.property('price');",
									"        pm.expect(product).to.have.property('category');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{customerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"products"
							]
						},
						"description": "Get all products (Any authenticated user)"
					},
					"response": []
				},
				{
					"name": "Get Product By Id",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{customerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/products/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"products",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Products",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{customerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/products/search?categoryId=1&minPrice=10&maxPrice=1000&inStock=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"products",
								"search"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "1",
									"description": "Filter by category"
								},
								{
									"key": "minPrice",
									"value": "10",
									"description": "Minimum price"
								},
								{
									"key": "maxPrice",
									"value": "1000",
									"description": "Maximum price"
								},
								{
									"key": "inStock",
									"value": "true",
									"description": "Filter by stock availability"
								}
							]
						},
						"description": "Search products with filters"
					},
					"response": []
				},
				{
					"name": "Delete Product",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{sellerToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/products/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"products",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						},
						"description": "Delete a product (Seller role required)"
					},
					"response": []
				}
			]
		},
		{
			"name": "Cart",
			"item": [
				{
					"name": "Add to Cart",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{customerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productId\": 1,\n    \"quantity\": 2\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/carts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"carts"
							]
						},
						"description": "Add product to cart (Customer role required)"
					},
					"response": []
				},
				{
					"name": "Remove from Cart",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productId\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/carts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"carts"
							]
						},
						"description": "Remove product from cart (Customer role required)"
					},
					"response": []
				},
				{
					"name": "Get All Carts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the correct Content-Type header\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response body is an empty array\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.empty;",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/carts/all",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"carts",
								"all"
							]
						},
						"description": "Get all carts (Admin role required)"
					},
					"response": []
				},
				{
					"name": "Get My Cart",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{customerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/carts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"carts"
							]
						},
						"description": "Get current user's cart (Customer role required)"
					},
					"response": []
				},
				{
					"name": "Get Cart by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/carts/:cartId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"carts",
								":cartId"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Orders",
			"item": [
				{
					"name": "Create Order",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{customerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"orders"
							]
						},
						"description": "Create a new order from cart items (Customer role required)"
					},
					"response": []
				},
				{
					"name": "Create Order For User",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/orders/admin/create-for-user/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"orders",
								"admin",
								"create-for-user",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "uuid-here"
								}
							]
						},
						"description": "Create order for a specific user (Admin role required)"
					},
					"response": []
				},
				{
					"name": "Update Order State",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{sellerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"orderId\": 1,\n    \"status\": \"SHIPPED\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/orders/:orderId/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"orders",
								":orderId",
								"status"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "1"
								}
							]
						},
						"description": "Update order status (Seller role required)"
					},
					"response": []
				},
				{
					"name": "Delete Order",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{customerToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/orders/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User's All Orders",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{customerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Order by ID",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{customerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/orders/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "adminToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "sellerToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "customerToken",
			"value": "",
			"type": "string"
		}
	]
}